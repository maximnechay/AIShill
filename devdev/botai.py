import os
import ssl
import certifi
import json
import hashlib
from datetime import datetime, timedelta
from pathlib import Path

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSL –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
os.environ["SSL_CERT_FILE"] = certifi.where()

from playwright.async_api import async_playwright
import time
import logging
import asyncio
from reply_engine import ReplyEngine

# Setup logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
USERNAMES = [
    # –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–ª–∏–¥–µ—Ä—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
    "i/communities/1471580197908586507",
    "i/communities/1493446837214187523",
    "OctonetAI",
    "therealchaseeb",
    # –ö—Ä–∏–ø—Ç–æ–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã
    "solanalabs",
    "solanamobile",
    "superstatefunds",
    "RaoulGMI",
    "balajis",
    # –û—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ –∏ CEO
    "SolanaFloor",
    "i/communities/1488952693443997701",
    "i/communities/1920145702623064249",
    # –¢—Ä–µ–π–¥–µ—Ä—ã
    "rajgokal",
    "i/communities/1783990533192651232",
    "devdevinvest/communities",
    # –ú–µ–¥–∏–∞
    "dappiokeeper",
    "SolanaInstitute",
    "i/communities/1839554213443236069",
    # DeFi
    "solana",
    "OpenAI",
    "kucoincom",
]


class RobustAutoResponder:
    def __init__(self):
        print(f"üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {os.environ.get('SSL_CERT_FILE')}")

        self.reply_engine = None
        self.dry_run = False  # LIVE —Ä–µ–∂–∏–º
        self.show_browser = False  # –í–ò–î–ò–ú–´–ô –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_dir = Path("./twitter_auth")
        self.auth_dir.mkdir(exist_ok=True)
        self.storage_state_file = self.auth_dir / "storage_state.json"

        # –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
        self.history_file = Path("tweet_history.json")
        self.processed_tweets = self.load_history()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏–∫–ª–æ–≤
        self.cycle_interval_minutes = 15
        self.max_responses_per_cycle = 1
        self.max_daily_responses = 60
        self.max_tweets_per_account = 5
        self.min_confidence_threshold = 0.7

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
        self.search_strategies = [
            {"scroll_depth": 800, "wait_time": 2},
            {"scroll_depth": 1600, "wait_time": 3},
        ]

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º persistent –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π browser + storage state
        self.playwright = None
        self.browser = None
        self.context_lock = asyncio.Lock()

        # –§–ª–∞–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_verified = False
        self.auth_check_time = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_cycles": 0,
            "total_responses": 0,
            "responses_today": 0,
            "last_reset_date": datetime.now().date().isoformat(),
            "start_time": datetime.now().isoformat(),
            "accounts_stats": {},
            "search_efficiency": {
                "cycles_with_responses": 0,
                "cycles_without_responses": 0,
                "average_tweets_per_cycle": 0,
            },
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for username in USERNAMES:
            self.stats["accounts_stats"][username] = {
                "checked": 0,
                "responded": 0,
                "tweets_found": 0,
            }

        self.load_stats()

    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤"""
        if self.history_file.exists():
            try:
                with open(self.history_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    processed = set(data.get("processed_tweets", []))

                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 2 –¥–Ω–µ–π)
                    cutoff_date = datetime.now() - timedelta(days=2)
                    cleaned = set()

                    for tweet_id in processed:
                        if tweet_id in data.get("metadata", {}):
                            tweet_date = datetime.fromisoformat(
                                data["metadata"][tweet_id].get("date", "2020-01-01")
                            )
                            if tweet_date > cutoff_date:
                                cleaned.add(tweet_id)

                    print(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cleaned)} ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤")
                    return cleaned

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        print("üìö –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ç–≤–∏—Ç–æ–≤")
        return set()

    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤"""
        try:
            data = {
                "processed_tweets": list(self.processed_tweets),
                "metadata": {},
                "last_updated": datetime.now().isoformat(),
                "total_processed": len(self.processed_tweets),
            }

            current_date = datetime.now().isoformat()
            for tweet_id in self.processed_tweets:
                data["metadata"][tweet_id] = {"date": current_date}

            with open(self.history_file, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def load_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_file = Path("responder_stats.json")
        if stats_file.exists():
            try:
                with open(stats_file, "r", encoding="utf-8") as f:
                    saved_stats = json.load(f)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–≤—ã–π –ª–∏ –¥–µ–Ω—å
                    last_date = saved_stats.get("last_reset_date")
                    today = datetime.now().date().isoformat()

                    if last_date != today:
                        saved_stats["responses_today"] = 0
                        saved_stats["last_reset_date"] = today
                        print("üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    if "accounts_stats" not in saved_stats:
                        saved_stats["accounts_stats"] = {}

                    for username in USERNAMES:
                        if username not in saved_stats["accounts_stats"]:
                            saved_stats["accounts_stats"][username] = {
                                "checked": 0,
                                "responded": 0,
                                "tweets_found": 0,
                            }
                        else:
                            if (
                                "tweets_found"
                                not in saved_stats["accounts_stats"][username]
                            ):
                                saved_stats["accounts_stats"][username][
                                    "tweets_found"
                                ] = 0

                    self.stats.update(saved_stats)
                    print(
                        f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stats['total_responses']} –æ—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ–≥–æ"
                    )

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats_file = Path("responder_stats.json")
            with open(stats_file, "w", encoding="utf-8") as f:
                json.dump(self.stats, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def generate_tweet_id(self, tweet_text, username):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ç–≤–∏—Ç–∞"""
        content = f"{tweet_text.strip()}{username}".encode("utf-8")
        return hashlib.md5(content).hexdigest()[:12]

    def is_tweet_processed(self, tweet_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —Ç–≤–∏—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"""
        return tweet_id in self.processed_tweets

    def mark_tweet_processed(self, tweet_id):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ç–≤–∏—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
        self.processed_tweets.add(tweet_id)
        self.save_history()

    def can_respond_today(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –µ—â–µ –æ—Ç–≤–µ—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è"""
        return self.stats["responses_today"] < self.max_daily_responses

    async def get_reply_engine(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReplyEngine"""
        if self.reply_engine is None:
            try:
                self.reply_engine = ReplyEngine()
                logger.info("‚úÖ AI –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI: {e}")
                raise
        return self.reply_engine

    def get_tweet_style(self, tweet_text):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∏–ª—è —Ç–≤–∏—Ç–∞"""
        text_lower = tweet_text.lower()

        if any(
            word in text_lower
            for word in ["moon", "üöÄ", "pump", "bull", "rally", "ath", "hodl"]
        ):
            return "humorous"
        elif any(
            word in text_lower
            for word in ["crash", "bear", "down", "dead", "dump", "recession"]
        ):
            return "analytical"
        elif any(
            word in text_lower
            for word in ["building", "future", "progress", "development", "innovation"]
        ):
            return "supportive"
        elif any(
            word in text_lower
            for word in ["scaling", "technology", "blockchain", "consensus", "protocol"]
        ):
            return "educational"
        elif any(
            word in text_lower
            for word in ["regulation", "sec", "government", "policy", "legal"]
        ):
            return "analytical"
        elif any(
            word in text_lower for word in ["defi", "nft", "web3", "metaverse", "dao"]
        ):
            return "educational"
        else:
            return "neutral"

    async def generate_response(self, tweet_text, username):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            engine = await self.get_reply_engine()
            style = self.get_tweet_style(tweet_text)

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∞
            if username in ["elonmusk", "saylor"]:
                audience = "mainstream"
            elif username in ["VitalikButerin", "stani", "haydenzadams"]:
                audience = "technical"
            else:
                audience = "crypto"

            result = await engine.generate_reply(
                tweet_text=tweet_text,
                style=style,
                audience=audience,
                reply_length="short",
            )

            return result["reply"], style, result.get("confidence_score", 0)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None, None, 0

    async def save_storage_state(self, context):
        """–ù–û–í–´–ô: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            storage_state = await context.storage_state()
            with open(self.storage_state_file, "w", encoding="utf-8") as f:
                json.dump(storage_state, f, indent=2, ensure_ascii=False)

            if not self.show_browser:
                logger.info("Storage state saved")
            else:
                print("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    async def load_storage_state(self):
        """–ù–û–í–´–ô: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if self.storage_state_file.exists():
            try:
                with open(self.storage_state_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return None

    async def get_browser_context(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
        async with self.context_lock:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º playwright –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not self.playwright:
                    self.playwright = await async_playwright().start()

                # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not self.browser:
                    if not self.show_browser:
                        logger.info("Launching browser...")
                    else:
                        print("üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")

                    self.browser = await self.playwright.chromium.launch(
                        headless=not self.show_browser,
                        args=[
                            "--no-sandbox",
                            "--disable-blink-features=AutomationControlled",
                            "--disable-web-security",
                            "--disable-features=VizDisplayCompositor",
                            "--disable-background-timer-throttling",
                            "--disable-backgrounding-occluded-windows",
                            "--disable-renderer-backgrounding",
                            "--disable-extensions",
                            "--no-first-run",
                            "--disable-default-apps",
                        ],
                    )

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
                storage_state = await self.load_storage_state()

                context_options = {
                    "viewport": {"width": 1280, "height": 720},
                    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                    "ignore_https_errors": True,
                }

                if storage_state:
                    context_options["storage_state"] = storage_state
                    if not self.show_browser:
                        logger.info("Loading saved auth state")
                    else:
                        print("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

                context = await self.browser.new_context(**context_options)

                if not self.show_browser:
                    logger.info("Browser context ready")
                else:
                    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –≥–æ—Ç–æ–≤")

                return context

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if self.browser:
                    try:
                        await self.browser.close()
                    except:
                        pass
                    self.browser = None
                raise

    async def check_and_fix_auth(self, force_check=False):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º storage state"""
        try:
            # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç
            current_time = datetime.now()
            if (
                not force_check
                and self.auth_verified
                and self.auth_check_time
                and (current_time - self.auth_check_time).total_seconds() < 300
            ):
                return True

            if not self.show_browser:
                logger.info("Checking authentication...")
            else:
                print("üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")

            context = await self.get_browser_context()
            page = await context.new_page()

            try:
                await page.goto("https://x.com/home", timeout=15000)
                await asyncio.sleep(2)

                current_url = page.url
                title = await page.title()

                # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                url_check = (
                    "home" in current_url
                    and "login" not in current_url
                    and "i/flow" not in current_url
                )

                title_check = not title.lower().startswith(
                    ("log in", "–≤—Ö–æ–¥", "sign in")
                )

                nav_count = 0
                twitter_elements = 0
                try:
                    nav_count = await page.locator("nav").count()
                    compose_button = await page.locator(
                        '[data-testid="SideNav_NewTweet_Button"]'
                    ).count()
                    sidebar = await page.locator(
                        '[data-testid="sidebarColumn"]'
                    ).count()
                    primary_column = await page.locator(
                        '[data-testid="primaryColumn"]'
                    ).count()
                    twitter_elements = compose_button + sidebar + primary_column
                except:
                    pass

                is_authenticated = (
                    url_check
                    and title_check
                    and (nav_count > 0 or twitter_elements >= 2)
                )

                if is_authenticated:
                    if not self.show_browser:
                        logger.info("Authentication verified")
                    else:
                        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")

                    self.auth_verified = True
                    self.auth_check_time = current_time

                    # –ù–û–í–´–ô: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    await self.save_storage_state(context)

                    return True
                else:
                    if not self.show_browser:
                        logger.warning("Not authenticated")
                    else:
                        print("‚ùå –ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù!")
                        print(f"   URL check: {url_check}")
                        print(f"   Title check: {title_check}")
                        print(f"   Nav elements: {nav_count}")
                        print(f"   Twitter elements: {twitter_elements}")

                    self.auth_verified = False
                    self.auth_check_time = None

                    # –í —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥
                    if not self.show_browser:
                        print("\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                        print("1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (Ctrl+C)")
                        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python login.py")
                        print("3. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Twitter –∞–∫–∫–∞—É–Ω—Ç")
                        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")
                        return False
                    else:
                        # –í –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–æ–π—Ç–∏
                        print("üí° –•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?")
                        return await self.interactive_login(page, context)

            finally:
                await page.close()
                await context.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self.auth_verified = False
            self.auth_check_time = None
            return False

    async def interactive_login(self, page, context):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞)"""
        if not self.show_browser:
            return False

        try:
            print("\nüîê –ë–´–°–¢–†–´–ô –í–•–û–î –í TWITTER")
            print("=" * 30)

            await page.goto("https://x.com/i/flow/login", timeout=15000)
            await asyncio.sleep(3)

            print("üìã –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ:")
            print("1. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω/email")
            print("2. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            print("3. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("4. –ù–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å –∫–æ–≥–¥–∞ –≤–æ–π–¥–µ—Ç–µ")

            input("\n‚è∏ –ù–∞–∂–º–∏—Ç–µ Enter –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await page.goto("https://x.com/home", timeout=15000)
            await asyncio.sleep(3)

            current_url = page.url
            nav_count = await page.locator("nav").count()

            if "home" in current_url and nav_count > 0:
                print("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!")
                self.auth_verified = True
                self.auth_check_time = datetime.now()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self.save_storage_state(context)
                return True
            else:
                print("‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {e}")
            return False

    async def find_new_tweets(self, username, max_check=5, strategy_index=0):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–≤–∏—Ç–æ–≤"""
        new_tweets = []

        try:
            strategy = self.search_strategies[
                min(strategy_index, len(self.search_strategies) - 1)
            ]

            context = await self.get_browser_context()
            page = await context.new_page()

            try:
                profile_url = f"https://x.com/{username}"

                if not self.show_browser:
                    logger.info(f"Accessing @{username}")
                else:
                    print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {profile_url}")

                await page.goto(
                    profile_url, timeout=15000, wait_until="domcontentloaded"
                )
                await asyncio.sleep(5)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
                current_url = page.url
                if "login" in current_url or "i/flow" in current_url:
                    print(f"‚ùå @{username}: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    self.auth_verified = False
                    self.auth_check_time = None
                    return []

                page_title = await page.title()
                if (
                    "doesn't exist" in page_title.lower()
                    or "suspended" in page_title.lower()
                ):
                    print(f"‚ùå @{username}: –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({page_title})")
                    return []

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–∏—Ç–æ–≤
                await page.evaluate(f"window.scrollTo(0, {strategy['scroll_depth']})")
                await asyncio.sleep(strategy["wait_time"])

                # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
                articles = await page.locator("article").all()

                if not self.show_browser:
                    logger.info(f"Found {len(articles)} articles for @{username}")
                else:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

                if len(articles) == 0:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å
                    await page.evaluate("window.scrollTo(0, 1200)")
                    await asyncio.sleep(3)
                    articles = await page.locator("article").all()

                for i, article in enumerate(articles[:max_check]):
                    try:
                        full_text = await article.inner_text()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–µ–ø–ª–∞–π –∏ –Ω–µ —Ä–µ–∫–ª–∞–º–∞
                        if (
                            full_text.lower().startswith("replying to")
                            or "promoted" in full_text.lower()
                            or "ad" in full_text.lower()
                        ):
                            continue

                        # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Ç–≤–∏—Ç–∞
                        tweet_text = ""
                        tweet_text_elem = article.locator('[data-testid="tweetText"]')

                        if await tweet_text_elem.count() > 0:
                            parts = await tweet_text_elem.evaluate_all(
                                "els => els.map(el => el.innerText.trim())"
                            )
                            tweet_text = " ".join(parts).strip()
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                            lines = full_text.split("\n")
                            potential_tweet_lines = []

                            for line in lines:
                                line = line.strip()
                                if (
                                    line
                                    and len(line) > 10
                                    and not line.startswith("@")
                                    and not line.endswith(("h", "m", "s"))
                                    and line
                                    not in ["Reply", "Retweet", "Like", "Share"]
                                ):
                                    potential_tweet_lines.append(line)

                                if len(potential_tweet_lines) >= 2:
                                    break

                            tweet_text = " ".join(potential_tweet_lines)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–∞
                        if (
                            len(tweet_text) > 20
                            and not tweet_text.startswith("RT @")
                            and len(tweet_text) < 600
                        ):

                            tweet_id = self.generate_tweet_id(tweet_text, username)

                            if not self.is_tweet_processed(tweet_id):
                                if self.is_good_tweet_for_reply(tweet_text):
                                    tweet = {
                                        "id": tweet_id,
                                        "text": tweet_text,
                                        "username": username,
                                        "found_at": datetime.now().isoformat(),
                                        "article_index": i,
                                    }
                                    new_tweets.append(tweet)

                                    if not self.show_browser:
                                        logger.info(f"New tweet found from @{username}")
                                    else:
                                        print(
                                            f"üÜï –ù–æ–≤—ã–π —Ç–≤–∏—Ç –æ—Ç @{username}: {tweet_text[:60]}..."
                                        )

                    except Exception as e:
                        if self.show_browser:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ {i}: {e}")
                        continue

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if username in self.stats["accounts_stats"]:
                    self.stats["accounts_stats"][username]["checked"] += 1
                    self.stats["accounts_stats"][username]["tweets_found"] += len(
                        new_tweets
                    )

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–≤–∏—Ç–æ–≤ @{username}: {e}")
                if "login" in str(e).lower() or "unauthorized" in str(e).lower():
                    self.auth_verified = False
                    self.auth_check_time = None
            finally:
                await page.close()
                await context.close()

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
            if "login" in str(e).lower() or "unauthorized" in str(e).lower():
                self.auth_verified = False
                self.auth_check_time = None

        return new_tweets

    def is_good_tweet_for_reply(self, tweet_text):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–≤–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        text_lower = tweet_text.lower()

        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–≤–∏—Ç—ã
        bad_indicators = [
            "gm",
            "gn",
            "good morning",
            "good night",
            "happy birthday",
            "rip",
            "rest in peace",
            "join my",
            "get your",
            "claim now",
            "link in bio",
            "dm me",
            "check out",
        ]

        if any(indicator in text_lower for indicator in bad_indicators):
            return False

        # –ò—â–µ–º —Ö–æ—Ä–æ—à–∏–µ —Ç–µ–º—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        good_indicators = [
            "bitcoin",
            "btc",
            "ethereum",
            "eth",
            "crypto",
            "blockchain",
            "price",
            "market",
            "trading",
            "bull",
            "bear",
            "pump",
            "dump",
            "ai",
            "artificial intelligence",
            "technology",
            "innovation",
            "defi",
            "nft",
            "web3",
            "dao",
            "metaverse",
            "protocol",
            "inflation",
            "fed",
            "economy",
            "finance",
            "investment",
            "tokenization",
            "token",
            "tge",
            "pre-sale",
            "airdrop",
            "drop",
            "kyc",
            "launchpad",
            "founder",
            "dev",
            "build",
            "builder",
            "startup",
            "founders",
            "launch",
            "rugpull",
            "scam",
            "verified",
            "trust",
            "team",
            "project",
            "community",
            "decentralized",
            "governance",
            "voting",
            "dapp",
            "yield",
            "meme",
            "memecoin",
            "shitcoin",
            "solana",
            "ecosystem",
            "utility",
            "investor",
            "developers",
            "whitelist",
            "dao vote",
            "smart contract",
            "audit",
            "liquidity",
            "dex",
            "dvi",
            "devinvest",
            "devinvestcoin",
        ]

        has_good_topic = any(indicator in text_lower for indicator in good_indicators)
        is_good_length = 20 <= len(tweet_text) <= 600
        has_substance = len(tweet_text.split()) >= 4

        return has_good_topic and is_good_length and has_substance

    async def send_response_to_tweet(self, tweet, response_text):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞"""
        try:
            context = await self.get_browser_context()
            page = await context.new_page()

            try:
                profile_url = f"https://x.com/{tweet['username']}"
                await page.goto(profile_url, timeout=12000)
                await asyncio.sleep(3)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                current_url = page.url
                if "login" in current_url or "i/flow" in current_url:
                    print(f"‚ùå –ü–æ—Ç–µ—Ä—è–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
                    self.auth_verified = False
                    self.auth_check_time = None
                    return False

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–∏—Ç–æ–≤
                await page.evaluate("window.scrollTo(0, 800)")
                await asyncio.sleep(6)

                # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                articles = await page.locator("article").all()

                target_article = None
                for article in articles:
                    try:
                        article_text = await article.inner_text()
                        if tweet["text"][:50] in article_text:
                            target_article = article
                            break
                    except:
                        continue

                if target_article:
                    # –ö–ª–∏–∫–∞–µ–º Reply
                    reply_button = target_article.locator('[data-testid="reply"]')
                    if await reply_button.count() > 0:
                        await reply_button.click()
                        await asyncio.sleep(3)

                        # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
                        compose_textbox = page.locator(
                            '[data-testid="tweetTextarea_0"]'
                        )
                        if await compose_textbox.count() > 0:
                            await compose_textbox.fill(response_text)
                            await asyncio.sleep(2)

                            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ
                            await compose_textbox.type(" ")
                            await asyncio.sleep(0.5)
                            await compose_textbox.click()
                            await asyncio.sleep(45)

                            if not self.dry_run:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                                tweet_button = page.locator(
                                    '[data-testid="tweetButton"]'
                                )
                                if await tweet_button.count() > 0:
                                    await tweet_button.click()
                                    await asyncio.sleep(3)
                                    return True
                            else:
                                print("üß™ DRY RUN: –û—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                                return True

                return False

            finally:
                await page.close()
                await context.close()

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            if "login" in str(e).lower() or "unauthorized" in str(e).lower():
                self.auth_verified = False
                self.auth_check_time = None
            return False

    async def smart_account_search(self):
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        all_candidates = []

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sorted_accounts = sorted(
            USERNAMES,
            key=lambda x: self.stats["accounts_stats"]
            .get(x, {})
            .get("tweets_found", 0),
            reverse=True,
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        for username in sorted_accounts:
            if len(all_candidates) >= self.max_responses_per_cycle * 3:
                break

            try:
                if not self.show_browser:
                    logger.info(f"Checking @{username}...")
                else:
                    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º @{username}...")

                new_tweets = await self.find_new_tweets(
                    username, max_check=self.max_tweets_per_account, strategy_index=0
                )

                if new_tweets:
                    all_candidates.extend(new_tweets)
                    if not self.show_browser:
                        logger.info(f"@{username}: found {len(new_tweets)} tweets")
                    else:
                        print(f"‚úÖ @{username}: –Ω–∞–π–¥–µ–Ω–æ {len(new_tweets)} —Ç–≤–∏—Ç–æ–≤")
                else:
                    if not self.show_browser:
                        logger.info(f"@{username}: no new tweets")
                    else:
                        print(f"üò¥ @{username}: –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤ –Ω–µ—Ç")

                await asyncio.sleep(1)

            except Exception as e:
                print(f"üí• –û—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
                continue

        return all_candidates

    async def run_cycle(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        cycle_start = datetime.now()
        self.stats["total_cycles"] += 1

        if not self.show_browser:
            logger.info(f"Starting cycle #{self.stats['total_cycles']}")
        else:
            print(f"\nüîÑ –¶–ò–ö–õ #{self.stats['total_cycles']}")
            print(f"‚è∞ {cycle_start.strftime('%H:%M:%S')}")
            print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not self.can_respond_today():
            message = f"Daily limit reached ({self.max_daily_responses} responses)"
            if not self.show_browser:
                logger.warning(message)
            else:
                print(
                    f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({self.max_daily_responses} –æ—Ç–≤–µ—Ç–æ–≤)"
                )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ü–∏–∫–ª–æ–º
        if not await self.check_and_fix_auth():
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
            return

        # –ü–æ–∏—Å–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
        if not self.show_browser:
            logger.info(f"Searching across {len(USERNAMES)} accounts...")
        else:
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ {len(USERNAMES)} –∞–∫–∫–∞—É–Ω—Ç–∞–º...")

        all_candidates = await self.smart_account_search()

        if not all_candidates:
            message = "No new tweets found"
            if not self.show_browser:
                logger.info(message)
            else:
                print("üò¥ –ù–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            self.stats["search_efficiency"]["cycles_without_responses"] += 1
            return

        if not self.show_browser:
            logger.info(f"Found {len(all_candidates)} candidates for response")
        else:
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(all_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—Ç–∞—Ç—å–∏ (–ø–µ—Ä–≤—ã–µ —Ç–≤–∏—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)
        sorted_candidates = sorted(all_candidates, key=lambda x: x["article_index"])

        responses_this_cycle = 0

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        for tweet in sorted_candidates[: self.max_responses_per_cycle]:
            if responses_this_cycle >= self.max_responses_per_cycle:
                break

            try:
                if not self.show_browser:
                    logger.info(f"Processing tweet from @{tweet['username']}")
                else:
                    print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–≤–∏—Ç –æ—Ç @{tweet['username']}")
                    print(f"üìù –¢–µ–∫—Å—Ç: {tweet['text'][:100]}...")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response, style, confidence = await self.generate_response(
                    tweet["text"], tweet["username"]
                )

                if response and confidence >= self.min_confidence_threshold:
                    if not self.show_browser:
                        logger.info(
                            f"Generated response with confidence {confidence:.2f}"
                        )
                    else:
                        print(f"üé® –°—Ç–∏–ª—å: {style}")
                        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
                        print(f'üí¨ –û—Ç–≤–µ—Ç: "{response}"')

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    if await self.send_response_to_tweet(tweet, response):
                        if not self.show_browser:
                            logger.info(f"Response sent to @{tweet['username']}")
                        else:
                            print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ @{tweet['username']}!")

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        self.mark_tweet_processed(tweet["id"])
                        self.stats["total_responses"] += 1
                        self.stats["responses_today"] += 1
                        self.stats["accounts_stats"][tweet["username"]][
                            "responded"
                        ] += 1
                        responses_this_cycle += 1

                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        self.log_response(tweet, response, style, confidence)

                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
                        self.mark_tweet_processed(tweet["id"])
                else:
                    if not self.show_browser:
                        logger.info(
                            f"Response failed quality check (confidence: {confidence:.2f})"
                        )
                    else:
                        print(
                            f"‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})"
                        )
                    self.mark_tweet_processed(tweet["id"])

            except Exception as e:
                print(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–∞: {e}")
                continue

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if responses_this_cycle > 0:
            self.stats["search_efficiency"]["cycles_with_responses"] += 1
        else:
            self.stats["search_efficiency"]["cycles_without_responses"] += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.save_stats()

        cycle_end = datetime.now()
        duration = (cycle_end - cycle_start).total_seconds()

        if not self.show_browser:
            logger.info(
                f"Cycle completed in {duration:.1f}s. Responses: {responses_this_cycle}. "
                f"Daily total: {self.stats['responses_today']}/{self.max_daily_responses}"
            )
        else:
            print(f"\nüìä –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.1f} —Å–µ–∫")
            print(f"üì§ –û—Ç–≤–µ—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ: {responses_this_cycle}")
            print(
                f"üìà –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {self.stats['responses_today']}/{self.max_daily_responses}"
            )
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(all_candidates)}")

    def log_response(self, tweet, response, style, confidence):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            response_log = {
                "timestamp": datetime.now().isoformat(),
                "username": tweet["username"],
                "tweet_id": tweet["id"],
                "tweet_text": tweet["text"][:1000],
                "response": response,
                "style": style,
                "confidence": confidence,
            }

            log_file = Path("responses_log.json")
            logs = []
            if log_file.exists():
                try:
                    with open(log_file, "r", encoding="utf-8") as f:
                        logs = json.load(f)
                except:
                    pass

            logs.append(response_log)

            # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            if len(logs) > 100:
                logs = logs[-100:]

            with open(log_file, "w", encoding="utf-8") as f:
                json.dump(logs, f, indent=2, ensure_ascii=False)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤...")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if self.browser:
                try:
                    await self.browser.close()
                    print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
                finally:
                    self.browser = None

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º playwright
            if self.playwright:
                try:
                    await self.playwright.stop()
                    print("‚úÖ Playwright –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ playwright: {e}")
                finally:
                    self.playwright = None

            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    async def run_forever(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        print("ü§ñ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú TWITTER –û–¢–í–ï–¢–ß–ò–ö–ê")
        print("=" * 60)
        print(f"üëÄ –ë—Ä–∞—É–∑–µ—Ä: {'–í–ò–î–ò–ú–´–ô' if self.show_browser else '–°–ö–†–´–¢–´–ô'}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.cycle_interval_minutes} –º–∏–Ω—É—Ç")
        print(
            f"üìä –õ–∏–º–∏—Ç: {self.max_responses_per_cycle} –æ—Ç–≤–µ—Ç –∑–∞ —Ü–∏–∫–ª, {self.max_daily_responses} –≤ –¥–µ–Ω—å"
        )
        print(f"üë• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {len(USERNAMES)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print(f"üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {self.min_confidence_threshold}")
        print(f"üîÑ –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%H:%M:%S')}")
        print(f"üíæ –†–µ–∂–∏–º: {'DRY RUN' if self.dry_run else 'LIVE (—Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)'}")
        print(
            f"üîê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {'—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è' if self.storage_state_file.exists() else '—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'}"
        )
        print()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ)
        if self.show_browser:
            print("üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
            for i, username in enumerate(USERNAMES, 1):
                stats = self.stats["accounts_stats"].get(username, {})
                print(
                    f"  {i:2d}. @{username} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats.get('checked', 0)}, –æ—Ç–≤–µ—Ç–æ–≤: {stats.get('responded', 0)})"
                )
            print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        print("üîê –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        if not await self.check_and_fix_auth(force_check=True):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI
        try:
            await self.get_reply_engine()
            print("‚úÖ AI –¥–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
            return

        try:
            while True:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª
                await self.run_cycle()

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                wait_seconds = self.cycle_interval_minutes * 60
                next_run = datetime.now() + timedelta(seconds=wait_seconds)

                if not self.show_browser:
                    logger.info(
                        f"Next cycle at {next_run.strftime('%H:%M:%S')}, waiting {self.cycle_interval_minutes} minutes..."
                    )
                else:
                    print(f"\n‚è±Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –≤ {next_run.strftime('%H:%M:%S')}")
                    print(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {self.cycle_interval_minutes} –º–∏–Ω—É—Ç...")

                # –ñ–¥–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                try:
                    await asyncio.sleep(wait_seconds)
                except KeyboardInterrupt:
                    break

        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.cleanup()
            self.save_stats()
            self.save_history()
            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print("üèÅ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def show_detailed_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 50)
        print(f"‚è∞ –ó–∞–ø—É—â–µ–Ω: {self.stats.get('start_time', 'N/A')}")
        print(f"üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {self.stats['total_cycles']}")
        print(f"üì§ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {self.stats['total_responses']}")
        print(
            f"üìà –û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {self.stats['responses_today']}/{self.max_daily_responses}"
        )
        print(f"üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–≤–∏—Ç–æ–≤: {len(self.processed_tweets)}")
        print(
            f"üîê –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if self.storage_state_file.exists() else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
        )

        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
        search_stats = self.stats.get("search_efficiency", {})
        success_cycles = search_stats.get("cycles_with_responses", 0)
        fail_cycles = search_stats.get("cycles_without_responses", 0)
        total = success_cycles + fail_cycles

        if total > 0:
            success_rate = (success_cycles / total) * 100
            print(
                f"üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞: {success_rate:.1f}% ({success_cycles}/{total})"
            )

        print(f"\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:")
        print("-" * 50)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–≤–µ—Ç–æ–≤
        sorted_accounts = sorted(
            self.stats["accounts_stats"].items(),
            key=lambda x: x[1].get("responded", 0),
            reverse=True,
        )

        for username, stats in sorted_accounts:
            checked = stats.get("checked", 0)
            responded = stats.get("responded", 0)
            found = stats.get("tweets_found", 0)

            response_rate = (responded / checked * 100) if checked > 0 else 0

            print(
                f"@{username:25} | –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked:3d} | –ù–∞–π–¥–µ–Ω–æ: {found:3d} | –û—Ç–≤–µ—Ç–æ–≤: {responded:2d} | Rate: {response_rate:4.1f}%"
            )

    async def test_single_account(self, username):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        print(f"\nüß™ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –î–õ–Ø @{username}")
        print("=" * 40)

        if username not in USERNAMES:
            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{username} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.check_and_fix_auth():
                print("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI
            await self.get_reply_engine()

            print(f"üîç –ò—â–µ–º —Ç–≤–∏—Ç—ã...")
            tweets = await self.find_new_tweets(username, max_check=5, strategy_index=0)

            if tweets:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤:")
                for i, tweet in enumerate(tweets[:3], 1):
                    print(f"\n  {i}. {tweet['text'][:80]}...")

                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
                    response, style, confidence = await self.generate_response(
                        tweet["text"], username
                    )
                    if response:
                        print(f"     üé® –°—Ç–∏–ª—å: {style}")
                        print(f"     üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
                        print(f"     üí¨ –û—Ç–≤–µ—Ç: {response[:60]}...")
                    else:
                        print(f"     ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
            else:
                print("‚ùå –ù–æ–≤—ã–µ —Ç–≤–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        finally:
            await self.cleanup()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    responder = RobustAutoResponder()

    print("ü§ñ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Twitter –æ—Ç–≤–µ—Ç—á–∏–∫ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
    print("=" * 60)
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("4. –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    print("5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("6. –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("0. –í—ã—Ö–æ–¥")

    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ [0-6]: ").strip()

    if choice == "1":
        print(
            f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –≤ {'DRY RUN' if responder.dry_run else 'LIVE'} —Ä–µ–∂–∏–º–µ!"
        )
        print(
            f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–∏—Ç—ã –∫–∞–∂–¥—ã–µ {responder.cycle_interval_minutes} –º–∏–Ω—É—Ç"
        )
        print(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(USERNAMES)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print(f"–ë—Ä–∞—É–∑–µ—Ä: {'–í–ò–î–ò–ú–´–ô' if responder.show_browser else '–°–ö–†–´–¢–´–ô'}")
        print(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if responder.storage_state_file.exists() else '—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'}"
        )
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N]: ").strip().lower()

        if confirm == "y":
            try:
                asyncio.run(responder.run_forever())
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        else:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

    elif choice == "2":
        responder.show_detailed_stats()

    elif choice == "3":
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        for i, username in enumerate(USERNAMES, 1):
            print(f"  {i}. @{username}")

        try:
            idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞: ")) - 1
            if 0 <= idx < len(USERNAMES):
                try:
                    asyncio.run(responder.test_single_account(USERNAMES[idx]))
                except KeyboardInterrupt:
                    print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    elif choice == "4":
        confirm = (
            input("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤? [y/N]: ").strip().lower()
        )
        if confirm == "y":
            responder.processed_tweets.clear()
            responder.save_history()
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")

    elif choice == "5":
        print(f"\n‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ü–∏–∫–ª–æ–≤: {responder.cycle_interval_minutes} –º–∏–Ω")
        print(f"   –û—Ç–≤–µ—Ç–æ–≤ –∑–∞ —Ü–∏–∫–ª: {responder.max_responses_per_cycle}")
        print(f"   –û—Ç–≤–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å: {responder.max_daily_responses}")
        print(f"   –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {responder.min_confidence_threshold}")
        print(f"   –¢–≤–∏—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {responder.max_tweets_per_account}")
        print(
            f"   –†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: {'–í–ò–î–ò–ú–´–ô' if responder.show_browser else '–°–ö–†–´–¢–´–ô'}"
        )
        print(f"   –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω: {'–î–ê' if responder.dry_run else '–ù–ï–¢'}")

        print(f"\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"1. –ò–Ω—Ç–µ—Ä–≤–∞–ª (—Ç–µ–∫—É—â–∏–π: {responder.cycle_interval_minutes} –º–∏–Ω)")
        print(f"2. –õ–∏–º–∏—Ç –∑–∞ —Ü–∏–∫–ª (—Ç–µ–∫—É—â–∏–π: {responder.max_responses_per_cycle})")
        print(f"3. –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (—Ç–µ–∫—É—â–∏–π: {responder.max_daily_responses})")
        print(f"4. –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—É—â–∏–π: {responder.min_confidence_threshold})")
        print(f"5. –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω")
        print(f"6. –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä")

        setting = input("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å? [1-6]: ").strip()

        if setting == "1":
            try:
                new_interval = int(input("–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã): "))
                if 5 <= new_interval <= 120:
                    responder.cycle_interval_minutes = new_interval
                    print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} –º–∏–Ω—É—Ç")
                else:
                    print("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 120 –º–∏–Ω—É—Ç")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

        elif setting == "2":
            try:
                new_limit = int(input("–ù–æ–≤—ã–π –ª–∏–º–∏—Ç –∑–∞ —Ü–∏–∫–ª: "))
                if 1 <= new_limit <= 5:
                    responder.max_responses_per_cycle = new_limit
                    print(f"‚úÖ –õ–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit}")
                else:
                    print("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

        elif setting == "3":
            try:
                new_daily = int(input("–ù–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: "))
                if 5 <= new_daily <= 100:
                    responder.max_daily_responses = new_daily
                    print(f"‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_daily}")
                else:
                    print("‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 100")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

        elif setting == "4":
            try:
                new_threshold = float(input("–ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.1-1.0): "))
                if 0.1 <= new_threshold <= 1.0:
                    responder.min_confidence_threshold = new_threshold
                    print(f"‚úÖ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_threshold}")
                else:
                    print("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 1.0")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

        elif setting == "5":
            responder.dry_run = not responder.dry_run
            print(f"‚úÖ –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω: {'–í–ö–õ–Æ–ß–ï–ù' if responder.dry_run else '–í–´–ö–õ–Æ–ß–ï–ù'}")

        elif setting == "6":
            responder.show_browser = not responder.show_browser
            print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä: {'–í–ò–î–ò–ú–´–ô' if responder.show_browser else '–°–ö–†–´–¢–´–ô'}")

    elif choice == "6":
        if responder.storage_state_file.exists():
            confirm = (
                input("–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏? [y/N]: ")
                .strip()
                .lower()
            )
            if confirm == "y":
                responder.storage_state_file.unlink()
                print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–æ")
                print("üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        else:
            print("‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    elif choice == "0":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()
